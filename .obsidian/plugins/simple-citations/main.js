/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SimpleCitations
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  jsonPath: "",
  folderPath: ""
};
var SimpleCitations = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "update-citations",
      name: "Update literature notes",
      callback: async () => {
        const normalizedJsonPath = (0, import_obsidian.normalizePath)(this.settings.jsonPath);
        const normalizedFolderPath = (0, import_obsidian.normalizePath)(this.settings.folderPath);
        const jsonFile = this.app.vault.getFileByPath(`${normalizedJsonPath}`);
        const folder = this.app.vault.getAbstractFileByPath(`${normalizedFolderPath}`);
        if (!jsonFile || !(folder instanceof import_obsidian.TFolder)) {
          new import_obsidian.Notice("Something wrong with the settings.");
          return;
        }
        const jsonContents = await this.app.vault.cachedRead(jsonFile);
        const jsonData = JSON.parse(jsonContents);
        const files = folder.children;
        let fileCount = 0;
        for (let i = 0; i < jsonData.length; i++) {
          const citekey = jsonData[i]["citation-key"];
          const targetFileName = "@" + citekey + ".md";
          const targetFile = files.find((file) => file.name === targetFileName);
          if (targetFile && targetFile instanceof import_obsidian.TFile) {
            await this.updateFrontMatter(targetFile, jsonData[i]);
            fileCount++;
          }
        }
        new import_obsidian.Notice(`${fileCount} file(s) updated.`);
      }
    });
    this.addCommand({
      id: "add-citations",
      name: "Add literature notes",
      callback: async () => {
        const normalizedJsonPath = (0, import_obsidian.normalizePath)(this.settings.jsonPath);
        const normalizedFolderPath = (0, import_obsidian.normalizePath)(this.settings.folderPath);
        const jsonFile = this.app.vault.getFileByPath(`${normalizedJsonPath}`);
        const folder = this.app.vault.getAbstractFileByPath(`${normalizedFolderPath}`);
        if (!jsonFile || !(folder instanceof import_obsidian.TFolder)) {
          new import_obsidian.Notice("Something wrong with the settings.");
          return;
        }
        const jsonContents = await this.app.vault.cachedRead(jsonFile);
        const jsonData = JSON.parse(jsonContents);
        const files = folder.children;
        let fileCount = 0;
        for (let i = 0; i < jsonData.length; i++) {
          const citekey = jsonData[i]["citation-key"];
          const targetFileName = "@" + citekey + ".md";
          const targetFile = files.find((file) => file.name === targetFileName);
          if (!targetFile) {
            const newFile = await this.app.vault.create(`${normalizedFolderPath}/${targetFileName}`, "");
            await this.updateFrontMatter(newFile, jsonData[i]);
            fileCount++;
          }
        }
        if (fileCount == 0) {
          new import_obsidian.Notice("No additional file(s).");
        } else {
          new import_obsidian.Notice(`${fileCount} file(s) added.`);
        }
      }
    });
    this.addCommand({
      id: "execute-pandoc",
      name: "Modified export (docx)",
      callback: async () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (!activeFile) {
          new import_obsidian.Notice("No active file.");
          return;
        }
        const content = await this.app.vault.read(activeFile);
        const commandId = "obsidian-pandoc:pandoc-export-docx";
        const commands = this.app.commands;
        const commandExist = commands.listCommands().some((cmd) => cmd.id === commandId);
        if (!commandExist) {
          new import_obsidian.Notice("Install Pandoc Plugin");
          return;
        }
        let newContent = await content.replace(/\[\[(.*?)\|.*?\]\]/g, "[[$1]]");
        newContent = newContent.replace(/\[\[@(.*?)\]\]/g, "[@$1]");
        newContent = newContent.replace(/\](\s*?)\[@/g, ";@");
        newContent = newContent.replace(/(\.)\s*?(\[@.*?\])/g, "$2$1 ");
        await this.app.vault.modify(activeFile, newContent);
        await commands.executeCommandById(commandId);
        new import_obsidian.Notice("Wait for 5 seconds.");
        await new Promise((resolve) => setTimeout(resolve, 5e3));
        await this.app.vault.modify(activeFile, content);
      }
    });
    this.addSettingTab(new SimpleCitationsSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async updateFrontMatter(targetFile, item) {
    await this.app.fileManager.processFrontMatter(targetFile, (fm) => {
      fm.aliases = [];
      if (!fm.tags) {
        fm.tags = [];
      }
      fm.title = item["title"];
      if (item["author"] && Array.isArray(item["author"])) {
        let authorsSet = /* @__PURE__ */ new Set();
        item["author"].forEach((author) => {
          let authorName = author.literal || `${author.given} ${author.family}`;
          authorsSet.add(authorName.trim());
        });
        let authorsList = Array.from(authorsSet);
        fm.authors = authorsList;
      }
      if (item["issued"] && Array.isArray(item["issued"]["date-parts"]) && item["issued"]["date-parts"][0] && !isNaN(item["issued"]["date-parts"][0][0])) {
        fm.year = Number(item["issued"]["date-parts"][0][0]);
      }
      fm.journal = item["container-title"];
      fm.doi = "https://doi.org/" + item["DOI"];
      fm.zotero = "zotero://select/items/@" + item["id"];
      if (fm.authors && fm.authors.length > 0 && fm.journal && fm.year) {
        fm.aliases.push(`${fm.authors[0]}. ${fm.journal}. ${fm.year}`);
      }
      fm.aliases.push(item["title"]);
    });
  }
};
var SimpleCitationsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Set json file path").addText((text) => text.setPlaceholder("Enter Relative Path").setValue(this.plugin.settings.jsonPath).onChange(async (value) => {
      this.plugin.settings.jsonPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Set literature note folder path").addText((text) => text.setPlaceholder("Enter Relative Path").setValue(this.plugin.settings.folderPath).onChange(async (value) => {
      this.plugin.settings.folderPath = value;
      await this.plugin.saveSettings();
    }));
  }
};

/* nosourcemap */